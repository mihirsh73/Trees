/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int, int> mp;
    void dfs(TreeNode* root, int sum, int target, int &count)
    {
        if(root==NULL) return;
        
        sum += root->val;
        if(sum==target) count++;
        count += mp[sum-target];
        mp[sum]++;
        dfs(root->left,sum,target,count);
        dfs(root->right,sum,target,count);
        mp[sum]--;
    }
   
    /*void getsum(TreeNode* root, int sum){//checking paths at each node.
        if(!root)return;
        if(root->val==sum){
            pathcount++;
        }
        getsum(root->left,sum-root->val);
        getsum(root->right,sum-root->val);
    }*/
    int pathSum(TreeNode* root, int& sum) {//perform simple dfs checking for each node
        /*if(root){
            getsum(root,sum);
            pathSum(root->left,sum);                        TC (N^2) SC O(N)
            pathSum(root->right,sum);
        }
        return pathcount;*/
       
        if(root==NULL) return 0;
        int count=0;
        dfs(root,0,sum,count);
        return count;
    }
};
