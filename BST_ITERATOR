//mplement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):

BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
int next() Moves the pointer to the right, then returns the number at the pointer.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
    private:
    stack<TreeNode*> st;
public:
    BSTIterator(TreeNode* root) {
        pushall(root);
        
    }
    
    int next() {
         TreeNode* t= st.top();
        st.pop();
        pushall(t->right);
        return t->val;
        
    }
    
    bool hasNext() {
      if(st.empty()==false)
      {
          return true;
      }
        else{
            return false;
        }
        
    }
    private:
    void pushall(TreeNode* root)
    {
        while(root!=NULL)
        {
            st.push(root);
            root=root->left;
        }
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */    TC O(1) BECAUSE O(N) FOR PUSHING INTO STACK BUT IF WE CALL N NEXT CALL THEN O(N/N)=O(1) SC = O(H)
