/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* construct(vector<int> preorder, int&i, int bound)
    {
        if(i==preorder.size() || preorder[i]>bound) return NULL;
        TreeNode* root= new TreeNode(preorder[i++]);   // TC O(N) SC O(N)
        root->left= construct(preorder,i,root->val);
        root->right= construct(preorder,i,bound);
        return root;
    }
   /* TreeNode* construct(vector<int>preorder, int s, int e, unordered_map<int,int> mp,int &index)
    {
        if(s>e)
        {
            return NULL; 
        }
        int val = preorder[index++];
        int search = mp[val];
        TreeNode* root= new TreeNode(val);
        root->left= construct(preorder,s,search-1,mp,index);
        root->right= construct(preorder,search+1,e,mp,index);
        return root;
    }*/
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        /*vector<int> inorder;
        for(int i=0; i<preorder.size(); i++)
        {
            inorder.push_back(preorder[i]);
        }
        sort(inorder.begin(), inorder.end());
        unordered_map<int,int> mp;                       // TC O(nlog(n)) SC O(N);
        for(int i=0; i<inorder.size(); i++)
        {
            mp[inorder[i]]=i;
        }
        int index=0;
        return construct(preorder,0,preorder.size()-1, mp,index);*/
        int i=0;
        return construct(preorder,i,INT_MAX);
        
    }
};
