//https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/description/
//LOGIC- FIRST CALCULATE FOR LEFT TREE IN FIRST CASE CONSIDER ALL THE LEFT CHILD AS STARTING POINT OF THE PATH IF AT ANY NODE RIGHT CHILD IS PRESENT THEN INCREASE THE LENGTH BY 1 
// SAME LOFIC FIR THE RIGTH TREE CONSIDER ALL THE RIGHT NODE IN RIGHT AS STARTING POINT IF LEFT CHILD IS PRESENT AT ANY NODE INCREMENT THR LENGHT BY 1 AND CHANGE THE DIRECTION.
void helper(TreeNode* root, int dir, int len, int &ans)
{
    if(root==NULL)
    {
        return;
    }
    ans=max(ans,len);
    if(dir==0)
    {
        helper(root->left,dir,1,ans);
        helper(root->right,dir^1,len+1,ans);
    }
    else{
       
        helper(root->right,dir,1,ans);
         helper(root->left,dir^1,len+1,ans);
    }
}
    int longestZigZag(TreeNode* root) {             // TC O(N) SC O(N)
        int ans=0;
       helper(root->left,0,1,ans);
      helper(root->right,1,1,ans);
      return ans;
                       
    }
