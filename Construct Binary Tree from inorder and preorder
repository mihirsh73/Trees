/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* construct(vector<int>& preorder,int st,int en, unordered_map<int,int> &mp, int &index)
    {
       
        if(st>en)
        {
            return NULL;
        }
        
        int value = preorder[index++];                                                     //TC O(N) SC O(N)
        TreeNode* root = new TreeNode(value);
          int search = mp[value];
          root->left = construct(preorder,st,search-1,mp,index);
          root->right= construct(preorder,search+1,en,mp,index);
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int> mp;
        int index=0;
        for(int i=0; i<inorder.size(); i++)
        {
            mp[inorder[i]]=i;
        }
        return construct(preorder,0,inorder.size()-1,mp,index);
        
        
    }
}; // TC O(N) SC O(N)
