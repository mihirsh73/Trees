/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int find1(TreeNode* root)           // Better solution than the below solution because after find the solution we do not need to traverse the whole tree.
    { 
        if(root==NULL)                   // TC O(N) SC O(N)
        {
            return 0;
        }
        int l= find1(root->left);
        int r= find1(root->right);
        if(l==-1 || r==-1)
        {
            return -1;
        }
        if(abs(l-r)>1)
        {
            return -1;
        }
        return max(l,r)+1;
    }
    int find(TreeNode* root, bool &res)
    {
        if(root==NULL)
        {
            return 0;
        }
        int l= find(root->left,res);
        int r= find(root->right,res);
        int temp =max(l,r)+1;             
        if(abs(l-r)>1)
        {
            res=false;
        }
        return temp;
    }
    bool isBalanced(TreeNode* root) {
      /*bool res=true;
        find(root,res);
        return res;*/
        int res=find1(root);
        if(res==-1)
        {
            return false;
        }
        return true;
        
    }
};
