/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map<int,int> mp;
    TreeNode* construct(vector<int> &postorder, int st, int en, int &ind)
    {
      
        if(st>en)
        {
            return NULL;
        }
        int val = postorder[ind--];                                                        TC O(N) SC O(N)
        TreeNode* root= new TreeNode(val);
        
        
        int search = mp[val];
        root->right = construct(postorder,search+1,en,ind);
        root->left= construct(postorder,st,search-1,ind);
        return root;
        
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int ind= postorder.size()-1;
        for(int i=0; i<inorder.size(); i++)
        {
            mp[inorder[i]]=i;
        }
        return construct(postorder,0,postorder.size()-1,ind);
        
    }
};
