
    void listtodouble(Node* root, Node* &head, Node* &prev, int &l)
    {
        if(root==NULL)
        {
            return;
        }
        listtodouble(root->left,head,prev,l);
        if(l==0)
        {
            l=1;
            head=root;
            prev=root;
        }
        else{
            prev->right=root;
            prev->right->left=prev;
            prev=prev->right;
            
        }
        listtodouble(root->right,head,prev,l);
    }
    Node * bToDLL(Node *root)
    {
     Node* head=NULL;
     Node* prev=NULL;
     int l=0;
     listtodouble(root,head,prev,l);
     return head;
    }
    
};



// { Driver Code Starts.


/* Function to print nodes in a given doubly linked list */
void printList(Node *node)
{
    Node *prev = NULL;
    while (node!=NULL)
    {
        cout << node->data << " ";
        prev = node;
        node = node->right;
    }
    cout << endl;
    while (prev!=NULL)
    {
        cout << prev->data << " ";
        prev = prev->left;
    }
    cout << endl;
}

void inorder(Node *root)
{
   if (root != NULL)
   {
       inorder(root->left);
       cout << root->data;
       inorder(root->right);
   }
}

/* Driver program to test size function*/
int main()
{
  int t;
  cin >> t;
  getchar();
  
  while (t--)
  {
     string inp;
     getline(cin, inp);
     Node *root = buildTree(inp);
     
     Solution ob; 
     Node *head = ob.bToDLL(root);
     printList(head);

  }
  return 0;
}

 // TC O(N) SC o(1)
