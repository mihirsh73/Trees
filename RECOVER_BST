/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, TreeNode* &prev,TreeNode* &first,TreeNode* &middle,TreeNode* &last)
    {
        if(root==NULL)
        {
            return;
        }
        inorder(root->left,prev,first,middle,last);
        if(prev!=NULL &&(root->val<prev->val))
        {
            if(first==NULL)        // first violation
            {
                first=prev;
                middle=root;
            }
            else{
                last=root;   // second violation
            }
        }
        prev=root;
        inorder(root->right,prev,first,middle,last);
        
    }
    void recoverTree(TreeNode* root) {
        TreeNode* prev=NULL;
        TreeNode* first=NULL;
        TreeNode* middle=NULL;
        TreeNode* last=NULL;
        inorder(root,prev,first,middle,last);
        if(first!=NULL && last!=NULL)
        {
            swap(first->val,last->val);
        }
        else if(first!=NULL && middle!=NULL)
        {
            swap(first->val,middle->val);
        }
        
    } // TC O(N) SC(1) IF I USED MORRIES TRAVERSAL
};
