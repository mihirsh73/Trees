/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int widthOfBinaryTree(TreeNode* root) {
       int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL)
        {
            return 0;
        }
        int ans=0;
        queue<pair<TreeNode*,int>> qt;
        qt.push({root,0});
        while(qt.empty()==false)
        {
            int size = qt.size();
            int currmin= qt.front().second;
            int l,r;
            for(int i=0; i<size; i++)
            {
                int curridx= qt.front().second-currmin;
                TreeNode* t= qt.front().first;
                qt.pop();
                if(i==0) l=curridx;
                if(i==size-1) r= curridx;
                if(t->left!=NULL)
                {
                    qt.push({t->left,2*curridx+1});
                }
                if(t->right!=NULL)
                {
                    qt.push({t->right,2*curridx+2});
                }
            }
            ans = max(ans,r-l+1);
        }
        
        return ans;
        
        
    }
};
TC O(N) SC O(N)
