BRUTE FORCE APPROACH - Root to node path for the P and then Q then find traverse the array till find the mismatch and return the element just before the mismatch
TC O(3N)
SC O(3N)


    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        /*path1(root,p);
        path2(root,q);
        reverse(res1.begin(),res1.end());
        reverse(res2.begin(),res2.end());
        for(int i=0; i<res1.size() && res2.size(); i++)
        {
            if(res1[i]!=res2[i])
            {
                return res1[i-1];
            }
        }
        return NULL;*/
        if(root==NULL || root==p || root==q)
        {
            return root;
        }                                                                    //TC O(N) SC O(N)
        TreeNode* l = lowestCommonAncestor(root->left,p,q);
        TreeNode* r= lowestCommonAncestor(root->right,p,q);
        if(l==NULL)
        {
            return r;
        }
        if(r==NULL)
        {
            return l;
        }
        else{
            return root;
        }
        
        
    }
};
