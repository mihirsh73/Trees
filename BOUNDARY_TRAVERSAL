/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

****
********************************************************/
void findright(TreeNode<int>* root, vector<int> &res)
{
    vector<int> t;
    while(root!=NULL)
    {
        if(root->right!=NULL || root->left!=NULL) t.push_back(root->data);
        if(root->right!=NULL) root=root->right;
        else{
            root=root->left;
        }
    }
    for(int i=t.size()-1; i>=0;i--)
    {
        res.push_back(t[i]);
    }
    
}
void addleaves(TreeNode<int>* root, vector<int> &res)
{
    
    if(root->left==NULL && root->right==NULL)
    {
        res.push_back(root->data);
        return;
        
    }
    if(root->left!=NULL)addleaves(root->left,res);
    if(root->right!=NULL)addleaves(root->right,res);
}
void findleft(TreeNode<int>* root, vector<int> &res)
{
    while(root!=NULL)
    {
        if(root->left!=NULL || root->right!=NULL) res.push_back(root->data);
        if(root->left!=NULL) root=root->left;
        else{
            root=root->right;
        }
    }
}
vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int> res;
    if(root==NULL) return res;
    if(root->left==NULL && root->right==NULL) 
    {res.push_back(root->data);
     return res;
    }
    res.push_back(root->data);
    findleft(root->left,res);
    addleaves(root,res);
    findright(root->right,res);
    return res;
}
// TC O(N) SC O(N)
