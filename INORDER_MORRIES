/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    /*void find(TreeNode* root, vector<int> &res){
        if(root==NULL)
        {
            return;
        }
        find(root->left,res);
        res.push_back(root->val);
        find(root->right,res);
    }*/
    vector<int> inorderTraversal(TreeNode* root) {
        /*vector<int> res;
        find(root,res);   // recursive approach
        return res;*/
       /*vector<int> ans;
        TreeNode* curr=root;
        TreeNode* ttop;
        stack<TreeNode*> st;
                                           // iterative approach
        while(curr!=NULL || st.empty()==false)
        {
            while(curr!=NULL)
            {
                
                st.push(curr);
                curr=curr->left;
            }
          
           
            curr=st.top();
            st.pop();
            ans.push_back(curr->val);
            curr=curr->right;
        }
        return ans;*/
        TreeNode* curr=root;
        TreeNode* prev;
        vector<int> res;
        while(curr!=NULL)
        {
            if(curr->left==NULL)
            {
                res.push_back(curr->val);
                curr=curr->right;
            }
            else{
                prev=curr->left;
                while(prev->right!=NULL && prev->right!=curr)
                {
                    prev = prev->right;
                }
                if(prev->right==NULL)
                {
                    prev->right=curr;
                    curr=curr->left;
                }
                else{
                    prev->right=NULL;
                    res.push_back(curr->val);
                    curr=curr->right;
                }
            }
            
        }
        return res;
    }
};
